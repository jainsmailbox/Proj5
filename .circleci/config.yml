# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  build-docker-image:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    # Checkout 
    steps:
      - checkout
        # Install Dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv devops
            . devops/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: run lint
          command: |
            . devops/bin/activate
            make lint
            
  # Deploy docker           
  deploy-docker-image:           
    environment:
      IMAGEVERSION: v2
    docker:
      - image: circleci/golang:1.15
     
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t $IMAGENAME:$IMAGEVERSION .
      - run:
          name: Listing Docker Image
          command: |
            docker image ls
      - run:
          name: Upload Docker code   
          command: |
            docker image ls	 
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
            dockerpath=$DOCKER_USERNAME/$IMAGENAME
            docker tag $IMAGENAME:$IMAGEVERSION ${dockerpath}:$IMAGEVERSION
            docker push $dockerpath
            
  eks_delpoy:
    #Image
    docker:
      - image: python:3.7.3-stretch
      
    # Checkout
    steps:
      - checkout
      - run:
          name: awscli Installation
          command: |
            # installing AWS CLI
            pip3 install awscli
      - run:
          name: Configure AWS CLI
          command: |            
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
            aws configure list
         
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
           
      - run:
          name: Install eksctl 
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
           
      - run:
          name: Create EKS cluster
          command: |
            aws cloudformation --region us-east-1 list-exports > cluster.txt
            cat cluster.txt
            if [ $(grep -i "aj-cluster" cluster.txt | wc -l) -ge 1 ]
              then
              echo "EKS Cluster already exists"
              else
              echo "Creating EKS Cluster"
              eksctl create cluster --name aj-cluster --version 1.25 --region us-east-1 --zones us-east-1a,us-east-1b,us-east-1c --nodegroup-name eksudanodegrp --node-type t2.small --nodes-min 2 --nodes-max 4 --managed
            fi
           
      - run:
          name: Deploy docker container in EKS cluster
          command: |
            aws eks --region us-east-1 update-kubeconfig --name aj-cluster
            kubectl apply -f aj_hello_world_deployment.yml
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl apply -f aj_hello_world_svc.yml
            kubectl get services
            kubectl describe svc capstoneproject
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install dependancies
          command: |
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Test load balancer
          command: |
            aws eks update-kubeconfig --name aj-cluster --region us-east-1
            export DNS=$(aws elb describe-load-balancers --query LoadBalancerDescriptions[*].DNSName --output text)
            export URL="http://${DNS}"
            echo "URL = ${URL}"
            if curl -s "${URL}:5000" | grep "udacity"
            then
              echo "Capstone Deployment Successful"
            else
              echo "Capstone Deployment Unsuccessful"
            fi

            
workflows:
  version:  2.1
  default:
    jobs:
      - build-docker-image
      - deploy-docker-image:
          requires: [build-docker-image]
      - eks_delpoy:
          requires: [deploy-docker-image]
      - smoke-test:
          requires: [eks_delpoy]          

